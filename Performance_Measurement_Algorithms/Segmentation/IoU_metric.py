# -*- coding: utf-8 -*-
"""Métrica_Segmentador-VRI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n_FydsjGpcjNMxP4XNcnyOEc4QMv3wsW
"""

import progressbar as pb
import os
import numpy as np
import pandas as pd
import cv2


def iou_calculate(img, label, file = True):
    """### Instanciar base de datos"""
    if(file):
        ruta_predics = img
        ruta_reference = label
        
        #X_train = encoder(ruta_images_train)
        #X_train_mask = encoder(ruta_labels_train)
        
        mask_predicts = encoder(ruta_predics)
        mask_reference = encoder(ruta_reference)
        '''
        #dandole el formato indicado
        mask_predicts = np.array(mask_predicts)
        mask_predicts = np.squeeze(mask_predicts)
        mask_reference = np.array(mask_reference)
        mask_reference = np.squeeze(mask_reference)
        '''
        """### Calcular IoU promedio"""
        
        iou = []
        valores = [];backup = []
        for idx in range(len(mask_reference)):
          iou = calculate_iou(mask_reference[idx], mask_predicts[idx])
          valores.append(iou)
          backup.append(iou)
        
        iou_prom = sum(valores)/len(valores)
        
        print(f"iou_prom = {iou_prom:.2f}")
    else:
        iou = calculate_iou(img, label)
        print(f"iou = {iou:.2f}")

"""Calculo de la covarianza de

### Funciones
"""



def calculate_iou(img_ref, img_sp):
  inter = 0
  img_ref = cv2.cvtColor(img_ref, cv2.COLOR_BGR2GRAY)
  img_sp = cv2.cvtColor(img_sp, cv2.COLOR_BGR2GRAY)

  img_ref = np.array(img_ref); img_sp = np.array(img_sp)
  u_ref = np.where(img_ref == 255); u_sp = np.where(img_sp == 255)
  num_pxl_ref = len(u_ref[1]); num_pxl_sp = len(u_sp[1])
  inter = np.shape(np.where(img_sp[u_ref]==255))[1]
  d = num_pxl_ref + num_pxl_sp - inter

  if d==0:iou = 0
  else: iou = inter/d
  return iou

def encoder(PATH):
  X = []
  names = os.listdir(PATH) 
  names.sort()
  for i in range(len(names)):
    img_path = "{}/{}".format(PATH,names[i])
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    X.append([img])
  X = np.array(X)
  X = np.squeeze(X)
  return X

#Métodos de Keras
from keras import backend as K
def iou_coef(y_true, y_pred, smooth=1):
  intersection = K.sum(K.abs(y_true * y_pred), axis=[1,2,3])
  union = K.sum(y_true,[1,2,3])+K.sum(y_pred,[1,2,3])-intersection
  iou = K.mean((intersection + smooth) / (union + smooth), axis=0)
  return iou